package com.sgck.common.log;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.util.Map;import java.util.Properties;import java.util.concurrent.ConcurrentHashMap;import org.apache.log4j.ConsoleAppender;import org.apache.log4j.Level;import org.apache.log4j.Logger;import org.apache.log4j.PatternLayout;import org.apache.log4j.PropertyConfigurator;import org.apache.log4j.RollingFileAppender;public class DSLogger{//	static protected Logger logger = null;	static public String defaultLoggerName = "sgck_web";	static protected Map<String,Logger> loggerMap = new ConcurrentHashMap<String,Logger>();		static public boolean init(String configPath)	{		Properties configProp = new Properties();		try {			configProp.load(new FileInputStream(configPath));		} catch (Exception e) {			return false;		}				String logFilePath = configProp.getProperty("log4j.appender.f.File");				String callerClassName = getCallerClassName(2);		if(callerClassName == null){			return false;		}				String subSystemName = getSubsystemNameByCallerClassName(callerClassName);				if(logFilePath == null){			logFilePath = "/data/logs/" + subSystemName + "/" + subSystemName + ".log";		}				Logger subLogger = Logger.getLogger(subSystemName);		RollingFileAppender appender = new RollingFileAppender();		try {			appender.setFile(logFilePath,true,true,100);		} catch (IOException e) {		}		appender.setMaxBackupIndex(50);		appender.setMaxFileSize("10MB");		appender.setImmediateFlush(true);		appender.setAppend(true);		appender.setLayout(new PatternLayout("%d{yyyy-MM-dd HH:mm:ss}  [CLASS]:%c[MESSAGE]:%m%n"));				subLogger.addAppender(appender);		subLogger.setLevel(Level.INFO);				ConsoleAppender consoleAppender = new ConsoleAppender(				new PatternLayout("%d{yyyy-MM-dd HH:mm:ss}  [CLASS]:%c[MESSAGE]:%m%n"),				configProp.getProperty("log4j.appender.console.Target", "System.out"));		subLogger.addAppender(consoleAppender);				loggerMap.put(subSystemName, subLogger);		return true;	}	static public boolean addLogger(String subSystemName,String logFilePath)	{		Logger subLogger = Logger.getLogger(subSystemName);		RollingFileAppender appender = new RollingFileAppender();		try {			appender.setFile(logFilePath,true,true,100);		} catch (IOException e) {		}		appender.setMaxBackupIndex(50);		appender.setMaxFileSize("10MB");		appender.setImmediateFlush(true);		appender.setAppend(true);		appender.setLayout(new PatternLayout("%d{yyyy-MM-dd HH:mm:ss}  [CLASS]:%c[MESSAGE]:%m%n"));				subLogger.addAppender(appender);		subLogger.setLevel(Level.INFO);		//加入控制台打印		ConsoleAppender consoleAppender = new ConsoleAppender(				new PatternLayout("%d{yyyy-MM-dd HH:mm:ss}  [CLASS]:%c[MESSAGE]:%m%n"),"System.out");		subLogger.addAppender(consoleAppender);				loggerMap.put(subSystemName, subLogger);		return true;	}		static public void setDefaultLoggerName(String defaultName){		defaultLoggerName = defaultName;	}		static public Logger getLogger(String subSystemName){		Logger logger = loggerMap.get(subSystemName);		if(logger == null){			logger = loggerMap.get(defaultLoggerName);		}		return logger;	}		static public void info(String msg)	{		String callerClassName = getCallerClassName(2);		if(callerClassName == null){			return;		}				String subSystemName = getSubsystemNameByCallerClassName(callerClassName);		Logger logger = getLogger(subSystemName);				if (logger != null)		{			logger.info(msg);		}	}		static public void debug(String msg)	{		String callerClassName = getCallerClassName(2);		if(callerClassName == null){			return;		}				String subSystemName = getSubsystemNameByCallerClassName(callerClassName);		Logger logger = getLogger(subSystemName);				if (logger != null)		{			logger.debug(msg);		}	}	static public void warn(String msg)	{		String callerClassName = getCallerClassName(2);		if(callerClassName == null){			return;		}				String subSystemName = getSubsystemNameByCallerClassName(callerClassName);		Logger logger = getLogger(subSystemName);				if (logger != null)		{			logger.warn(msg);		}	}	static public void error(String msg)	{		String callerClassName = getCallerClassName(2);		if(callerClassName == null){			return;		}				String subSystemName = getSubsystemNameByCallerClassName(callerClassName);		Logger logger = getLogger(subSystemName);				if (logger != null)		{			logger.error(msg);		}	}		static public void error(String msg,Exception e)	{		String callerClassName = getCallerClassName(2);		if(callerClassName == null){			return;		}				String subSystemName = getSubsystemNameByCallerClassName(callerClassName);		Logger logger = getLogger(subSystemName);				if (logger != null)		{			logger.error(msg,e);		}	}		/**	 * 获取调用者的类名	 * @param stackIndex 调用堆栈的索引，从0开始编码，当前函数堆栈的索引为0	 * @return 指定调用堆栈上的调用者的全类名	 */	static public String getCallerClassName(int stackIndex){		StackTraceElement[] stackElements = new Throwable().getStackTrace();		if(stackElements != null && stackElements.length >= stackIndex + 1)		{			return stackElements[stackIndex].getClassName();		}else{			return null;		}	}		static public String getSubsystemNameByCallerClassName(String qualifiedClassName){		String[] classNameItems = qualifiedClassName.split("\\.");		if(classNameItems.length < 2){			return defaultLoggerName;		}else{			return classNameItems[1];		}	}}